-----------------------------------------------------------------------
--  demo.Models -- demo.Models
-----------------------------------------------------------------------
--  File generated by ada-gen DO NOT MODIFY
--  Template used: templates/model/package-spec.xhtml
--  Ada Generator: https://ada-gen.googlecode.com/svn/trunk Revision 1095
-----------------------------------------------------------------------
--  Copyright (C) 2013 Iorek.Byrnison
--  Written by Iorek.Byrnison (Iorek.Byrnison@svalbard.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
with ADO.Sessions;
with ADO.Objects;
with ADO.Statements;
with ADO.SQL;
with ADO.Schemas;
with Ada.Calendar;
with Ada.Containers.Vectors;
with Ada.Strings.Unbounded;
with Util.Beans.Objects;
with Util.Beans.Basic.Lists;
package demo.Models is
   type Question_Ref is new ADO.Objects.Object_Ref with null record;

   type Answer_Ref is new ADO.Objects.Object_Ref with null record;

   --  Create an object key for Question.
   function Question_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Question from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Question_Key (Id : in String) return ADO.Objects.Object_Key;

   Null_Question : constant Question_Ref;
   function "=" (Left, Right : Question_Ref'Class) return Boolean;

   --
   procedure Set_Id (Object : in out Question_Ref;
                     Value  : in ADO.Identifier);

   --
   function Get_Id (Object : in Question_Ref)
                 return ADO.Identifier;
   --
   function Get_Version (Object : in Question_Ref)
                 return Integer;

   --
   procedure Set_Title (Object : in out Question_Ref;
                        Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Title (Object : in out Question_Ref;
                        Value : in String);

   --
   function Get_Title (Object : in Question_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Title (Object : in Question_Ref)
                 return String;

   --
   procedure Set_Text (Object : in out Question_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Text (Object : in out Question_Ref;
                       Value : in String);

   --
   function Get_Text (Object : in Question_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Text (Object : in Question_Ref)
                 return String;

   --
   procedure Set_Create_Date (Object : in out Question_Ref;
                              Value  : in Ada.Calendar.Time);

   --
   function Get_Create_Date (Object : in Question_Ref)
                 return Ada.Calendar.Time;

   --
   procedure Set_Update_Date (Object : in out Question_Ref;
                              Value  : in ADO.Nullable_Time);

   --
   function Get_Update_Date (Object : in Question_Ref)
                 return ADO.Nullable_Time;

   --
   procedure Set_Author (Object : in out Question_Ref;
                         Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Author (Object : in out Question_Ref;
                         Value : in String);

   --
   function Get_Author (Object : in Question_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Author (Object : in Question_Ref)
                 return String;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Question_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Question_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Question_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Question_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Question_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (From : in Question_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   QUESTION_TABLE : constant ADO.Schemas.Class_Mapping_Access;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Question_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Question_Ref;
                   Into   : in out Question_Ref);

   package Question_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Natural,
                                  Element_Type => Question_Ref,
                                  "="          => "=");
   subtype Question_Vector is Question_Vectors.Vector;

   procedure List (Object  : in out Question_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class);
   --  Create an object key for Answer.
   function Answer_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Answer from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Answer_Key (Id : in String) return ADO.Objects.Object_Key;

   Null_Answer : constant Answer_Ref;
   function "=" (Left, Right : Answer_Ref'Class) return Boolean;

   --
   procedure Set_Id (Object : in out Answer_Ref;
                     Value  : in ADO.Identifier);

   --
   function Get_Id (Object : in Answer_Ref)
                 return ADO.Identifier;
   --
   function Get_Version (Object : in Answer_Ref)
                 return Integer;

   --
   procedure Set_Text (Object : in out Answer_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Text (Object : in out Answer_Ref;
                       Value : in String);

   --
   function Get_Text (Object : in Answer_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Text (Object : in Answer_Ref)
                 return String;

   --
   procedure Set_Author (Object : in out Answer_Ref;
                         Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Author (Object : in out Answer_Ref;
                         Value : in String);

   --
   function Get_Author (Object : in Answer_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Author (Object : in Answer_Ref)
                 return String;

   --
   procedure Set_Question (Object : in out Answer_Ref;
                           Value  : in demo.Models.Question_Ref'Class);

   --
   function Get_Question (Object : in Answer_Ref)
                 return demo.Models.Question_Ref'Class;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Answer_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Answer_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Answer_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Answer_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Answer_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (From : in Answer_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   ANSWER_TABLE : constant ADO.Schemas.Class_Mapping_Access;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Answer_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Answer_Ref;
                   Into   : in out Answer_Ref);

   package Answer_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Natural,
                                  Element_Type => Answer_Ref,
                                  "="          => "=");
   subtype Answer_Vector is Answer_Vectors.Vector;

   procedure List (Object  : in out Answer_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class);



private
   QUESTION_NAME : aliased constant String := "demo_question";
   COL_0_1_NAME : aliased constant String := "id";
   COL_1_1_NAME : aliased constant String := "version";
   COL_2_1_NAME : aliased constant String := "title";
   COL_3_1_NAME : aliased constant String := "text";
   COL_4_1_NAME : aliased constant String := "create_date";
   COL_5_1_NAME : aliased constant String := "update_date";
   COL_6_1_NAME : aliased constant String := "author";

   QUESTION_DEF : aliased constant ADO.Schemas.Class_Mapping :=
     (Count => 7,
      Table => QUESTION_NAME'Access,
      Members => (
         1 => COL_0_1_NAME'Access,
         2 => COL_1_1_NAME'Access,
         3 => COL_2_1_NAME'Access,
         4 => COL_3_1_NAME'Access,
         5 => COL_4_1_NAME'Access,
         6 => COL_5_1_NAME'Access,
         7 => COL_6_1_NAME'Access
)
     );
   QUESTION_TABLE : constant ADO.Schemas.Class_Mapping_Access := QUESTION_DEF'Access;

   Null_Question : constant Question_Ref
      := Question_Ref'(ADO.Objects.Object_Ref with others => <>);

   type Question_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => QUESTION_DEF'Access)
   with record
       Version : Integer;
       Title : Ada.Strings.Unbounded.Unbounded_String;
       Text : Ada.Strings.Unbounded.Unbounded_String;
       Create_Date : Ada.Calendar.Time;
       Update_Date : ADO.Nullable_Time;
       Author : Ada.Strings.Unbounded.Unbounded_String;
   end record;

   type Question_Access is access all Question_Impl;

   overriding
   procedure Destroy (Object : access Question_Impl);

   overriding
   procedure Find (Object  : in out Question_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   overriding
   procedure Load (Object  : in out Question_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Question_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);

   overriding
   procedure Save (Object  : in out Question_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);

   procedure Create (Object  : in out Question_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   procedure Delete (Object  : in out Question_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   procedure Set_Field (Object : in out Question_Ref'Class;
                        Impl   : out Question_Access);
   ANSWER_NAME : aliased constant String := "demo_answer";
   COL_0_2_NAME : aliased constant String := "id";
   COL_1_2_NAME : aliased constant String := "version";
   COL_2_2_NAME : aliased constant String := "text";
   COL_3_2_NAME : aliased constant String := "author";
   COL_4_2_NAME : aliased constant String := "question_id";

   ANSWER_DEF : aliased constant ADO.Schemas.Class_Mapping :=
     (Count => 5,
      Table => ANSWER_NAME'Access,
      Members => (
         1 => COL_0_2_NAME'Access,
         2 => COL_1_2_NAME'Access,
         3 => COL_2_2_NAME'Access,
         4 => COL_3_2_NAME'Access,
         5 => COL_4_2_NAME'Access
)
     );
   ANSWER_TABLE : constant ADO.Schemas.Class_Mapping_Access := ANSWER_DEF'Access;

   Null_Answer : constant Answer_Ref
      := Answer_Ref'(ADO.Objects.Object_Ref with others => <>);

   type Answer_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => ANSWER_DEF'Access)
   with record
       Version : Integer;
       Text : Ada.Strings.Unbounded.Unbounded_String;
       Author : Ada.Strings.Unbounded.Unbounded_String;
       Question : demo.Models.Question_Ref;
   end record;

   type Answer_Access is access all Answer_Impl;

   overriding
   procedure Destroy (Object : access Answer_Impl);

   overriding
   procedure Find (Object  : in out Answer_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   overriding
   procedure Load (Object  : in out Answer_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Answer_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);

   overriding
   procedure Save (Object  : in out Answer_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);

   procedure Create (Object  : in out Answer_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   procedure Delete (Object  : in out Answer_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   procedure Set_Field (Object : in out Answer_Ref'Class;
                        Impl   : out Answer_Access);
end demo.Models;
